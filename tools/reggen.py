#!/usr/bin/env python3
import sys, os, json
try:
    import yaml
except Exception:
    print("This tool requires PyYAML (pip install pyyaml)")
    sys.exit(2)

HEADER_PROLOGUE = """
/* Auto-generated by intel-ethernet-regs/tools/reggen.py */
#pragma once
#ifdef __cplusplus
extern "C" {
#endif
"""

HEADER_EPILOGUE = """
#ifdef __cplusplus
}
#endif
"""

def gen_header(device_yaml: str, out_dir: str):
    with open(device_yaml, 'r', encoding='utf-8') as f:
        data = yaml.safe_load(f)
    device = data['device']
    blocks = data.get('blocks', [])
    name = device.upper()

    lines = [HEADER_PROLOGUE]
    guard = f"INTEL_{name}_REGS_H"
    lines.append(f"#ifndef {guard}")
    lines.append(f"#define {guard}")
    lines.append("")

    def parse_hex_or_int(v):
        if isinstance(v, int):
            return v
        if isinstance(v, str):
            v = v.strip()
            if v.lower().startswith('0x'):
                return int(v, 16)
            return int(v)
        raise TypeError(f"Unsupported numeric type: {type(v)}")

    for blk in blocks:
        base = parse_hex_or_int(blk['base'])
        blk_name = blk['name'].upper()
        lines.append(f"/* Block {blk_name} base: 0x{base:05X} */")
        for reg in blk.get('registers', []):
            roff = parse_hex_or_int(reg['offset'])
            rname = reg['name'].upper()
            abs_off = base + roff
            desc = reg.get('description', '')
            lines.append(f"/* {desc} */")
            lines.append(f"#define {name}_{rname}\t0x{abs_off:05X}")
        lines.append("")

    lines.append(f"#endif /* {guard} */")
    lines.append(HEADER_EPILOGUE)

    os.makedirs(out_dir, exist_ok=True)
    out_path = os.path.join(out_dir, f"{device.lower()}_regs.h")
    with open(out_path, 'w', encoding='utf-8') as f:
        f.write("\n".join(lines))
    return out_path

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Usage: reggen.py <device.yaml> <out_dir>")
        sys.exit(1)
    out = gen_header(sys.argv[1], sys.argv[2])
    print(out)
