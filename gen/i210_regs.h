
/* Auto-generated by intel-ethernet-regs/tools/reggen.py */
#pragma once
#ifdef __cplusplus
extern "C" {
#endif

#ifndef INTEL_I210_REGS_H
#define INTEL_I210_REGS_H

/* Block PTP base: 0x0B600 */
/* System time register Low */
#define I210_SYSTIML	0x0B600
/* System time register High */
#define I210_SYSTIMH	0x0B604
/* Time Increment Attributes */
#define I210_TIMINCA	0x0B608
/* Tx Time Sync Control Register */
/* access=rw */
#define I210_TSYNCTXCTL	0x0B614
#define I210_TSYNCTXCTL_TXTT_EN_SHIFT	4
#define I210_TSYNCTXCTL_TXTT_EN_MASK	(((1ULL<<1)-1ULL) << I210_TSYNCTXCTL_TXTT_EN_SHIFT)
#define I210_TSYNCTXCTL_TXTTNUM_SHIFT	5
#define I210_TSYNCTXCTL_TXTTNUM_MASK	(((1ULL<<2)-1ULL) << I210_TSYNCTXCTL_TXTTNUM_SHIFT)
#define I210_TSYNCTXCTL_TXTTNUM_ALL	0U
#define I210_TSYNCTXCTL_TXTTNUM_SYNC	1U
#define I210_TSYNCTXCTL_TXTTNUM_DELAY_REQ	2U
static inline unsigned long long I210_TSYNCTXCTL_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I210_TSYNCTXCTL_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Tx Timestamp Value Low */
#define I210_TXSTMPL	0x0B618
/* Tx Timestamp Value High */
#define I210_TXSTMPH	0x0B61C
/* Rx Time Sync Control Register */
/* access=rw */
#define I210_TSYNCRXCTL	0x0B620
#define I210_TSYNCRXCTL_RXTT_EN_SHIFT	4
#define I210_TSYNCRXCTL_RXTT_EN_MASK	(((1ULL<<1)-1ULL) << I210_TSYNCRXCTL_RXTT_EN_SHIFT)
#define I210_TSYNCRXCTL_RXTTNUM_SHIFT	5
#define I210_TSYNCRXCTL_RXTTNUM_MASK	(((1ULL<<2)-1ULL) << I210_TSYNCRXCTL_RXTTNUM_SHIFT)
#define I210_TSYNCRXCTL_RXTTNUM_ALL	0U
#define I210_TSYNCRXCTL_RXTTNUM_SYNC	1U
#define I210_TSYNCRXCTL_RXTTNUM_DELAY_REQ	2U
static inline unsigned long long I210_TSYNCRXCTL_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I210_TSYNCRXCTL_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Rx Timestamp Low */
#define I210_RXSTMPL	0x0B624
/* Rx Timestamp High */
#define I210_RXSTMPH	0x0B628

/* Block MAC_CTRL base: 0x00000 */
/* Device Control */
#define I210_CTRL	0x00000
/* Device Status */
#define I210_STATUS	0x00008
/* Extended Device Control */
#define I210_CTRL_EXT	0x00018

/* Block MDIC base: 0x00020 */
/* MDI Control */
#define I210_MDIC	0x00020

/* Block INTERRUPTS base: 0x000C0 */
/* Interrupt Cause Read */
#define I210_ICR	0x000C0
/* Interrupt Cause Set */
#define I210_ICS	0x000C8
/* Interrupt Mask Set/Read */
#define I210_IMS	0x000D0
/* Interrupt Mask Clear */
#define I210_IMC	0x000D8

/* Block EXT_INTERRUPTS base: 0x01500 */
/* Extended Interrupt Mask Set/Read */
#define I210_EIMS	0x01524
/* Extended Interrupt Mask Clear */
#define I210_EIMC	0x01528
/* Extended Interrupt Auto Clear Enable */
#define I210_EIAC	0x0152C
/* Extended Interrupt Auto Mask Enable */
#define I210_EIAM	0x01530
/* Extended Interrupt Cause Read */
#define I210_EICR	0x01580

/* Block EITR base: 0x01680 */
/* Interrupt Throttle for vector 0 */
#define I210_EITR0	0x01680
/* Interrupt Throttle for vector 1 */
#define I210_EITR1	0x01684
/* Interrupt Throttle for vector 2 */
#define I210_EITR2	0x01688
/* Interrupt Throttle for vector 3 */
#define I210_EITR3	0x0168C
/* Interrupt Throttle for vector 4 */
#define I210_EITR4	0x01690

/* Block RX base: 0x00100 */
/* Receive Control */
#define I210_RCTL	0x00100

/* Block TX base: 0x00400 */
/* Transmit Control */
#define I210_TCTL	0x00400
/* Transmit Inter-Packet Gap */
#define I210_TIPG	0x00410

/* Block FLOW_CONTROL_TIMER base: 0x00170 */
/* Flow Control Transmit Timer Value */
#define I210_FCTTV	0x00170

/* Block FLOW_CONTROL_THRESHOLDS base: 0x02160 */
/* Flow Control Receive Threshold Low */
#define I210_FCRTL	0x02160
/* Flow Control Receive Threshold High */
#define I210_FCRTH	0x02168

/* Block FLOW_CONTROL_REFRESH base: 0x02460 */
/* Flow Control Refresh Timer Value */
#define I210_FCRTV	0x02460

/* Block RX_QUEUE0 base: 0x02800 */
/* Receive Descriptor Base Address Low (Queue 0) */
#define I210_RDBAL	0x02800
/* Receive Descriptor Base Address High (Queue 0) */
#define I210_RDBAH	0x02804
/* Receive Descriptor Length (Queue 0) */
#define I210_RDLEN	0x02808
/* Receive Descriptor Head (Queue 0) */
#define I210_RDH	0x02810
/* Receive Descriptor Tail (Queue 0) */
#define I210_RDT	0x02818

/* Block TX_QUEUE0 base: 0x03800 */
/* Transmit Descriptor Base Address Low (Queue 0) */
#define I210_TDBAL	0x03800
/* Transmit Descriptor Base Address High (Queue 0) */
#define I210_TDBAH	0x03804
/* Transmit Descriptor Length (Queue 0) */
#define I210_TDLEN	0x03808
/* Transmit Descriptor Head (Queue 0) */
#define I210_TDH	0x03810
/* Transmit Descriptor Tail (Queue 0) */
#define I210_TDT	0x03818

/* Block MAC_ADDRESS base: 0x05400 */
/* Receive Address Low [0] */
#define I210_RAL0	0x05400
/* Receive Address High [0] */
#define I210_RAH0	0x05404

/* Block MTA base: 0x05200 */
/* Multicast Table Array [0] */
#define I210_MTA0	0x05200

/* Block VFTA base: 0x05600 */
/* VLAN Filter Table Array [0] */
#define I210_VFTA0	0x05600

/* Block STATS base: 0x04000 */
/* RX Error Count */
#define I210_RXERRC	0x0400C
/* Missed Packets Count */
#define I210_MPC	0x04010
/* Packets Received (64 Bytes) Count */
#define I210_PRC64	0x0405C
/* Packets Received (65–127 Bytes) Count */
#define I210_PRC127	0x04060
/* Packets Received (128–255 Bytes) Count */
#define I210_PRC255	0x04064
/* Packets Received (256–511 Bytes) Count */
#define I210_PRC511	0x04068
/* Packets Received (512–1023 Bytes) Count */
#define I210_PRC1023	0x0406C
/* Packets Received (1024 to Max Bytes) Count */
#define I210_PRC1522	0x04070
/* Good Packets Transmitted Count */
#define I210_GPTC	0x04080
/* Good Octets Received Count (Low) */
#define I210_GORCL	0x04088
/* Good Octets Received Count (High) */
#define I210_GORCH	0x0408C
/* Good Octets Transmitted Count (Low) */
#define I210_GOTCL	0x04090
/* Good Octets Transmitted Count (High) */
#define I210_GOTCH	0x04094

#endif /* INTEL_I210_REGS_H */

#ifdef __cplusplus
}
#endif
