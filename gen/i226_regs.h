
/* SPDX-License-Identifier: MIT */
/* Auto-generated by intel-ethernet-regs/tools/reggen.py (reggen.py 0.1.0) */
/* Source YAML: i226.yaml @ f96e02c; Repo: 0ecdf8a */
#pragma once
#ifdef __cplusplus
extern "C" {
#endif

#ifndef INTEL_I226_REGS_H
#define INTEL_I226_REGS_H

/* PCI/PCIe Capabilities for I226 (PCI config space) */
#define I226_PCIE_CAP_ID(vid)	(vid)
#define I226_MSI_X_CAP_ID	0x0011
#define I226_MSI_X_MSGCTL	0x02
#define I226_MSI_X_MSGCTL_TBL_SIZE_SHIFT	0
#define I226_MSI_X_MSGCTL_TBL_SIZE_MASK	(((1U<<11)-1U) << I226_MSI_X_MSGCTL_TBL_SIZE_SHIFT)
#define I226_MSI_X_MSGCTL_FE_SHIFT	14
#define I226_MSI_X_MSGCTL_FE_MASK	(((1U<<1)-1U) << I226_MSI_X_MSGCTL_FE_SHIFT)
#define I226_MSI_X_MSGCTL_EN_SHIFT	15
#define I226_MSI_X_MSGCTL_EN_MASK	(((1U<<1)-1U) << I226_MSI_X_MSGCTL_EN_SHIFT)
#define I226_MSI_X_TBL	0x04
#define I226_MSI_X_PBA	0x08

#define I226_LTR_CAP_ID	0x0018
#define I226_LTR_CAP	0x04
#define I226_LTR_CTRL	0x06

#define I226_L1SS_CAP_ID	0x001E
#define I226_L1SS_CAP	0x04
#define I226_L1SS_CTRL1	0x08
#define I226_L1SS_CTRL2	0x0C

#define I226_PTM_CAP_ID	0x001F
#define I226_PTM_CAP	0x04
#define I226_PTM_CAP_GRANULARITY_SHIFT	8
#define I226_PTM_CAP_GRANULARITY_MASK	(((1U<<8)-1U) << I226_PTM_CAP_GRANULARITY_SHIFT)
#define I226_PTM_CTRL	0x08
#define I226_PTM_CTRL_EN_SHIFT	0
#define I226_PTM_CTRL_EN_MASK	(((1U<<1)-1U) << I226_PTM_CTRL_EN_SHIFT)
#define I226_PTM_CTRL_RCPTM_EN_SHIFT	1
#define I226_PTM_CTRL_RCPTM_EN_MASK	(((1U<<1)-1U) << I226_PTM_CTRL_RCPTM_EN_SHIFT)
#define I226_PTM_STATUS	0x0A
#define I226_PTM_STATUS_PTM_RESP_BUSY_SHIFT	0
#define I226_PTM_STATUS_PTM_RESP_BUSY_MASK	(((1U<<1)-1U) << I226_PTM_STATUS_PTM_RESP_BUSY_SHIFT)


/* Block PTP base: 0x0B600 */
/* System time register Low */
/* access=ro */
#define I226_SYSTIML	0x0B600
/* System time register High */
/* access=ro */
#define I226_SYSTIMH	0x0B604
/* Time Increment Attributes */
/* access=rw */
#define I226_TIMINCA	0x0B608
/* TX Time Sync Control Register (0xB614) */
/* access=rw */
#define I226_TSYNCTXCTL	0x0B614
#define I226_TSYNCTXCTL_TXTT_SHIFT	0
#define I226_TSYNCTXCTL_TXTT_MASK	(((1ULL<<1)-1ULL) << I226_TSYNCTXCTL_TXTT_SHIFT)
#define I226_TSYNCTXCTL_EN_SHIFT	4
#define I226_TSYNCTXCTL_EN_MASK	(((1ULL<<1)-1ULL) << I226_TSYNCTXCTL_EN_SHIFT)
static inline unsigned long long I226_TSYNCTXCTL_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_TSYNCTXCTL_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* TX Timestamp Value Low */
/* access=ro */
#define I226_TXSTMPL	0x0B618
/* TX Timestamp Value High */
/* access=ro */
#define I226_TXSTMPH	0x0B61C
/* RX Time Sync Control Register (0xB620; RW) */
/* access=rw */
#define I226_TSYNCRXCTL	0x0B620
#define I226_TSYNCRXCTL_RXTT_SHIFT	0
#define I226_TSYNCRXCTL_RXTT_MASK	(((1ULL<<1)-1ULL) << I226_TSYNCRXCTL_RXTT_SHIFT)
#define I226_TSYNCRXCTL_TYPE_SHIFT	1
#define I226_TSYNCRXCTL_TYPE_MASK	(((1ULL<<3)-1ULL) << I226_TSYNCRXCTL_TYPE_SHIFT)
#define I226_TSYNCRXCTL_EN_SHIFT	4
#define I226_TSYNCRXCTL_EN_MASK	(((1ULL<<1)-1ULL) << I226_TSYNCRXCTL_EN_SHIFT)
#define I226_TSYNCRXCTL_SYSCFI_SHIFT	5
#define I226_TSYNCRXCTL_SYSCFI_MASK	(((1ULL<<1)-1ULL) << I226_TSYNCRXCTL_SYSCFI_SHIFT)
static inline unsigned long long I226_TSYNCRXCTL_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_TSYNCRXCTL_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* RX Timestamp Low (0xB624; RO) */
/* access=ro */
#define I226_RXSTMPL	0x0B624
/* RX Timestamp High (0xB628; RO) */
/* access=ro */
#define I226_RXSTMPH	0x0B628

/* Block MAC_CTRL base: 0x00000 */
/* Device Control */
#define I226_CTRL	0x00000
/* Device Status */
#define I226_STATUS	0x00008
/* Extended Device Control */
#define I226_CTRL_EXT	0x00018

/* Block MDIO base: 0x00020 */
/* MDI Control (MDIO/MDC access to internal PHY) */
/* access=rw */
#define I226_MDIC	0x00020
#define I226_MDIC_DATA_SHIFT	0
#define I226_MDIC_DATA_MASK	(((1ULL<<16)-1ULL) << I226_MDIC_DATA_SHIFT)
#define I226_MDIC_REG_SHIFT	16
#define I226_MDIC_REG_MASK	(((1ULL<<5)-1ULL) << I226_MDIC_REG_SHIFT)
#define I226_MDIC_PHY_SHIFT	21
#define I226_MDIC_PHY_MASK	(((1ULL<<5)-1ULL) << I226_MDIC_PHY_SHIFT)
#define I226_MDIC_OP_SHIFT	26
#define I226_MDIC_OP_MASK	(((1ULL<<2)-1ULL) << I226_MDIC_OP_SHIFT)
#define I226_MDIC_R_SHIFT	28
#define I226_MDIC_R_MASK	(((1ULL<<1)-1ULL) << I226_MDIC_R_SHIFT)
#define I226_MDIC_I_SHIFT	29
#define I226_MDIC_I_MASK	(((1ULL<<1)-1ULL) << I226_MDIC_I_SHIFT)
#define I226_MDIC_E_SHIFT	30
#define I226_MDIC_E_MASK	(((1ULL<<1)-1ULL) << I226_MDIC_E_SHIFT)
static inline unsigned long long I226_MDIC_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_MDIC_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }

/* Block INTERRUPTS base: 0x000C0 */
/* Interrupt Cause Read */
/* access=rc/w1c */
#define I226_ICR	0x000C0
#define I226_ICR_TXDW_SHIFT	0
#define I226_ICR_TXDW_MASK	(((1ULL<<1)-1ULL) << I226_ICR_TXDW_SHIFT)
#define I226_ICR_TXQE_SHIFT	1
#define I226_ICR_TXQE_MASK	(((1ULL<<1)-1ULL) << I226_ICR_TXQE_SHIFT)
#define I226_ICR_LSC_SHIFT	2
#define I226_ICR_LSC_MASK	(((1ULL<<1)-1ULL) << I226_ICR_LSC_SHIFT)
#define I226_ICR_RXDMT0_SHIFT	4
#define I226_ICR_RXDMT0_MASK	(((1ULL<<1)-1ULL) << I226_ICR_RXDMT0_SHIFT)
#define I226_ICR_RXO_SHIFT	6
#define I226_ICR_RXO_MASK	(((1ULL<<1)-1ULL) << I226_ICR_RXO_SHIFT)
#define I226_ICR_RXT0_SHIFT	7
#define I226_ICR_RXT0_MASK	(((1ULL<<1)-1ULL) << I226_ICR_RXT0_SHIFT)
static inline unsigned long long I226_ICR_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_ICR_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Interrupt Cause Set */
/* access=wo */
#define I226_ICS	0x000C8
/* Interrupt Mask Set/Read */
/* access=rw */
#define I226_IMS	0x000D0
#define I226_IMS_TXDW_SHIFT	0
#define I226_IMS_TXDW_MASK	(((1ULL<<1)-1ULL) << I226_IMS_TXDW_SHIFT)
#define I226_IMS_TXQE_SHIFT	1
#define I226_IMS_TXQE_MASK	(((1ULL<<1)-1ULL) << I226_IMS_TXQE_SHIFT)
#define I226_IMS_LSC_SHIFT	2
#define I226_IMS_LSC_MASK	(((1ULL<<1)-1ULL) << I226_IMS_LSC_SHIFT)
#define I226_IMS_RXDMT0_SHIFT	4
#define I226_IMS_RXDMT0_MASK	(((1ULL<<1)-1ULL) << I226_IMS_RXDMT0_SHIFT)
#define I226_IMS_RXO_SHIFT	6
#define I226_IMS_RXO_MASK	(((1ULL<<1)-1ULL) << I226_IMS_RXO_SHIFT)
#define I226_IMS_RXT0_SHIFT	7
#define I226_IMS_RXT0_MASK	(((1ULL<<1)-1ULL) << I226_IMS_RXT0_SHIFT)
static inline unsigned long long I226_IMS_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_IMS_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Interrupt Mask Clear */
/* access=wo */
#define I226_IMC	0x000D8

/* Block EXT_INTERRUPTS base: 0x01500 */
/* Extended Interrupt Mask Set/Read */
/* access=rw */
#define I226_EIMS	0x01524
#define I226_EIMS_VEC0_SHIFT	0
#define I226_EIMS_VEC0_MASK	(((1ULL<<1)-1ULL) << I226_EIMS_VEC0_SHIFT)
#define I226_EIMS_VEC1_SHIFT	1
#define I226_EIMS_VEC1_MASK	(((1ULL<<1)-1ULL) << I226_EIMS_VEC1_SHIFT)
#define I226_EIMS_VEC2_SHIFT	2
#define I226_EIMS_VEC2_MASK	(((1ULL<<1)-1ULL) << I226_EIMS_VEC2_SHIFT)
#define I226_EIMS_VEC3_SHIFT	3
#define I226_EIMS_VEC3_MASK	(((1ULL<<1)-1ULL) << I226_EIMS_VEC3_SHIFT)
#define I226_EIMS_TCP_TIMER_SHIFT	30
#define I226_EIMS_TCP_TIMER_MASK	(((1ULL<<1)-1ULL) << I226_EIMS_TCP_TIMER_SHIFT)
static inline unsigned long long I226_EIMS_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_EIMS_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Extended Interrupt Mask Clear */
/* access=wo */
#define I226_EIMC	0x01528
/* Extended Interrupt Auto Clear Enable */
/* access=rw */
#define I226_EIAC	0x0152C
/* Extended Interrupt Auto Mask Enable */
/* access=rw */
#define I226_EIAM	0x01530
/* Extended Interrupt Cause Read */
/* access=rc/w1c */
#define I226_EICR	0x01580
#define I226_EICR_VEC0_SHIFT	0
#define I226_EICR_VEC0_MASK	(((1ULL<<1)-1ULL) << I226_EICR_VEC0_SHIFT)
#define I226_EICR_VEC1_SHIFT	1
#define I226_EICR_VEC1_MASK	(((1ULL<<1)-1ULL) << I226_EICR_VEC1_SHIFT)
#define I226_EICR_VEC2_SHIFT	2
#define I226_EICR_VEC2_MASK	(((1ULL<<1)-1ULL) << I226_EICR_VEC2_SHIFT)
#define I226_EICR_VEC3_SHIFT	3
#define I226_EICR_VEC3_MASK	(((1ULL<<1)-1ULL) << I226_EICR_VEC3_SHIFT)
#define I226_EICR_TCP_TIMER_SHIFT	30
#define I226_EICR_TCP_TIMER_MASK	(((1ULL<<1)-1ULL) << I226_EICR_TCP_TIMER_SHIFT)
#define I226_EICR_OTHER_SHIFT	31
#define I226_EICR_OTHER_MASK	(((1ULL<<1)-1ULL) << I226_EICR_OTHER_SHIFT)
static inline unsigned long long I226_EICR_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_EICR_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }

/* Block TSN base: 0x08600 */
/* Time Aware Shaper Control */
/* access=rw */
#define I226_TAS_CTRL	0x08600
#define I226_TAS_CTRL_EN_SHIFT	0
#define I226_TAS_CTRL_EN_MASK	(((1ULL<<1)-1ULL) << I226_TAS_CTRL_EN_SHIFT)
#define I226_TAS_CTRL_GATE_LIST_SHIFT	1
#define I226_TAS_CTRL_GATE_LIST_MASK	(((1ULL<<1)-1ULL) << I226_TAS_CTRL_GATE_LIST_SHIFT)
#define I226_TAS_CTRL_BASE_TIME_SHIFT	2
#define I226_TAS_CTRL_BASE_TIME_MASK	(((1ULL<<1)-1ULL) << I226_TAS_CTRL_BASE_TIME_SHIFT)
static inline unsigned long long I226_TAS_CTRL_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_TAS_CTRL_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* TAS Base Time Low / Cycle Config */
/* access=rw */
#define I226_TAS_CONFIG0	0x08604
/* TAS Base Time High */
/* access=rw */
#define I226_TAS_CONFIG1	0x08608
/* TAS Gate List Base */
/* access=rw */
#define I226_TAS_GATE_LIST	0x08610

/* Block FRAME_PREEMPTION base: 0x08700 */
/* Frame Preemption Config */
/* access=rw */
#define I226_FP_CONFIG	0x08700
#define I226_FP_CONFIG_EN_SHIFT	0
#define I226_FP_CONFIG_EN_MASK	(((1ULL<<1)-1ULL) << I226_FP_CONFIG_EN_SHIFT)
#define I226_FP_CONFIG_VERIFY_DIS_SHIFT	1
#define I226_FP_CONFIG_VERIFY_DIS_MASK	(((1ULL<<1)-1ULL) << I226_FP_CONFIG_VERIFY_DIS_SHIFT)
#define I226_FP_CONFIG_PREEMPTABLE_QUEUES_SHIFT	8
#define I226_FP_CONFIG_PREEMPTABLE_QUEUES_MASK	(((1ULL<<8)-1ULL) << I226_FP_CONFIG_PREEMPTABLE_QUEUES_SHIFT)
#define I226_FP_CONFIG_MIN_FRAGMENT_SIZE_SHIFT	16
#define I226_FP_CONFIG_MIN_FRAGMENT_SIZE_MASK	(((1ULL<<8)-1ULL) << I226_FP_CONFIG_MIN_FRAGMENT_SIZE_SHIFT)
static inline unsigned long long I226_FP_CONFIG_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_FP_CONFIG_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Frame Preemption Status */
/* access=ro */
#define I226_FP_STATUS	0x08704

/* Block MANAGEABILITY base: 0x08800 */
/* HOST Interface Control Register (RW) */
#define I226_HICR	0x08F00
/* Firmware Software Mailbox Register (RW) */
#define I226_FWSWMB	0x08F04
/* FW Status 0 register (RO) */
#define I226_FWSTS	0x08F0C

/* Block EITR base: 0x01680 */
/* Interrupt Throttle for vector 0 */
#define I226_EITR0	0x01680
#define I226_EITR0_INTERVAL_SHIFT	0
#define I226_EITR0_INTERVAL_MASK	(((1ULL<<16)-1ULL) << I226_EITR0_INTERVAL_SHIFT)
#define I226_EITR0_COUNTER_SHIFT	16
#define I226_EITR0_COUNTER_MASK	(((1ULL<<16)-1ULL) << I226_EITR0_COUNTER_SHIFT)
static inline unsigned long long I226_EITR0_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_EITR0_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Interrupt Throttle for vector 1 */
#define I226_EITR1	0x01684
#define I226_EITR1_INTERVAL_SHIFT	0
#define I226_EITR1_INTERVAL_MASK	(((1ULL<<16)-1ULL) << I226_EITR1_INTERVAL_SHIFT)
#define I226_EITR1_COUNTER_SHIFT	16
#define I226_EITR1_COUNTER_MASK	(((1ULL<<16)-1ULL) << I226_EITR1_COUNTER_SHIFT)
static inline unsigned long long I226_EITR1_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_EITR1_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Interrupt Throttle for vector 2 */
#define I226_EITR2	0x01688
#define I226_EITR2_INTERVAL_SHIFT	0
#define I226_EITR2_INTERVAL_MASK	(((1ULL<<16)-1ULL) << I226_EITR2_INTERVAL_SHIFT)
#define I226_EITR2_COUNTER_SHIFT	16
#define I226_EITR2_COUNTER_MASK	(((1ULL<<16)-1ULL) << I226_EITR2_COUNTER_SHIFT)
static inline unsigned long long I226_EITR2_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_EITR2_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }
/* Interrupt Throttle for vector 3 */
#define I226_EITR3	0x0168C
#define I226_EITR3_INTERVAL_SHIFT	0
#define I226_EITR3_INTERVAL_MASK	(((1ULL<<16)-1ULL) << I226_EITR3_INTERVAL_SHIFT)
#define I226_EITR3_COUNTER_SHIFT	16
#define I226_EITR3_COUNTER_MASK	(((1ULL<<16)-1ULL) << I226_EITR3_COUNTER_SHIFT)
static inline unsigned long long I226_EITR3_GET(unsigned long long v, unsigned long long mask, unsigned shift) { return (v & mask) >> shift; }
static inline unsigned long long I226_EITR3_SET(unsigned long long v, unsigned long long mask, unsigned shift, unsigned long long val) { return (v & ~mask) | ((val << shift) & mask); }

/* Block MAC_ADDR base: 0x05400 */
/* Receive Address Low 0 (lower 32 bits of MAC) */
#define I226_RAL0	0x05400
/* Receive Address High 0 (upper 16 bits + AV bit) */
#define I226_RAH0	0x05404

/* Block VLAN base: 0x05600 */
/* VLAN Filter Table Array [0] */
#define I226_VFTA0	0x05600

/* Block LED base: 0x00E00 */
/* LED Control Register */
#define I226_LEDCTL	0x00E00

#endif /* INTEL_I226_REGS_H */

#ifdef __cplusplus
}
#endif
